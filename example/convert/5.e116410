Traceback (most recent call last):
  File "/public/home/group_zyl/.conda/envs/pt200/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/public/home/group_zyl/.conda/envs/pt200/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
  File "/public/home/group_zyl/zyl/program/Equi-MPNN/__main__.py", line 1, in <module>
    import run.train
  File "/public/home/group_zyl/zyl/program/Equi-MPNN/run/train.py", line 110, in <module>
    if np.mod(iepoch,check_epoch)==0: scheduler(loss_val)
  File "/public/home/group_zyl/zyl/program/Equi-MPNN/src/scheduler.py", line 17, in __call__
    return self.forward(loss)
  File "/public/home/group_zyl/zyl/program/Equi-MPNN/src/scheduler.py", line 30, in forward
    jit_pes=torch.jit.script(self.ema_model.module)
  File "/public/home/group_zyl/.conda/envs/pt200/lib/python3.10/site-packages/torch/jit/_script.py", line 1284, in script
    return torch.jit._recursive.create_script_module(
  File "/public/home/group_zyl/.conda/envs/pt200/lib/python3.10/site-packages/torch/jit/_recursive.py", line 480, in create_script_module
    return create_script_module_impl(nn_module, concrete_type, stubs_fn)
  File "/public/home/group_zyl/.conda/envs/pt200/lib/python3.10/site-packages/torch/jit/_recursive.py", line 542, in create_script_module_impl
    script_module = torch.jit.RecursiveScriptModule._construct(cpp_module, init_fn)
  File "/public/home/group_zyl/.conda/envs/pt200/lib/python3.10/site-packages/torch/jit/_script.py", line 614, in _construct
    init_fn(script_module)
  File "/public/home/group_zyl/.conda/envs/pt200/lib/python3.10/site-packages/torch/jit/_recursive.py", line 520, in init_fn
    scripted = create_script_module_impl(orig_value, sub_concrete_type, stubs_fn)
  File "/public/home/group_zyl/.conda/envs/pt200/lib/python3.10/site-packages/torch/jit/_recursive.py", line 546, in create_script_module_impl
    create_methods_and_properties_from_stubs(concrete_type, method_stubs, property_stubs)
  File "/public/home/group_zyl/.conda/envs/pt200/lib/python3.10/site-packages/torch/jit/_recursive.py", line 397, in create_methods_and_properties_from_stubs
    concrete_type._create_methods_and_properties(property_defs, property_rcbs, method_defs, method_rcbs, method_defaults)
RuntimeError: 
Arguments for call are not valid.
The following variants are available:
  
  aten::add.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor:
  Expected a value of type 'Tensor' for argument 'self' but instead found type 'Tuple[Tensor]'.
  
  aten::add.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> Tensor:
  Expected a value of type 'Tensor' for argument 'self' but instead found type 'Tuple[Tensor]'.
  
  aten::add.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!):
  Expected a value of type 'Tensor' for argument 'self' but instead found type 'Tuple[Tensor]'.
  
  aten::add.Scalar_out(Tensor self, Scalar other, Scalar alpha=1, *, Tensor(a!) out) -> Tensor(a!):
  Expected a value of type 'Tensor' for argument 'self' but instead found type 'Tuple[Tensor]'.
  
  aten::add.t(t[] a, t[] b) -> t[]:
  Could not match type List[int] to List[t] in argument 'b': Type variable 't' previously matched to type Tensor is matched to type int.
  
  aten::add.str(str a, str b) -> str:
  Expected a value of type 'str' for argument 'a' but instead found type 'Tuple[Tensor]'.
  
  aten::add.int(int a, int b) -> int:
  Expected a value of type 'int' for argument 'a' but instead found type 'Tuple[Tensor]'.
  
  aten::add.complex(complex a, complex b) -> complex:
  Expected a value of type 'complex' for argument 'a' but instead found type 'Tuple[Tensor]'.
  
  aten::add.float(float a, float b) -> float:
  Expected a value of type 'float' for argument 'a' but instead found type 'Tuple[Tensor]'.
  
  aten::add.int_complex(int a, complex b) -> complex:
  Expected a value of type 'int' for argument 'a' but instead found type 'Tuple[Tensor]'.
  
  aten::add.complex_int(complex a, int b) -> complex:
  Expected a value of type 'complex' for argument 'a' but instead found type 'Tuple[Tensor]'.
  
  aten::add.float_complex(float a, complex b) -> complex:
  Expected a value of type 'float' for argument 'a' but instead found type 'Tuple[Tensor]'.
  
  aten::add.complex_float(complex a, float b) -> complex:
  Expected a value of type 'complex' for argument 'a' but instead found type 'Tuple[Tensor]'.
  
  aten::add.int_float(int a, float b) -> float:
  Expected a value of type 'int' for argument 'a' but instead found type 'Tuple[Tensor]'.
  
  aten::add.float_int(float a, int b) -> float:
  Expected a value of type 'float' for argument 'a' but instead found type 'Tuple[Tensor]'.
  
  aten::add(Scalar a, Scalar b) -> Scalar:
  Expected a value of type 'number' for argument 'a' but instead found type 'Tuple[Tensor]'.
  
  add(float a, Tensor b) -> Tensor:
  Expected a value of type 'float' for argument 'a' but instead found type 'Tuple[Tensor]'.
  
  add(int a, Tensor b) -> Tensor:
  Expected a value of type 'int' for argument 'a' but instead found type 'Tuple[Tensor]'.
  
  add(complex a, Tensor b) -> Tensor:
  Expected a value of type 'complex' for argument 'a' but instead found type 'Tuple[Tensor]'.

The original call is:
  File "/public/home/group_zyl/zyl/program/Equi-MPNN/low_level/sph_cal.py", line 54
        distances=torch.linalg.norm(cart,dim=0)  # to convert to the dimension (n,batchsize)
        d_sq=distances*distances
        sph_shape=(self.dim[0],)+cart.shape[1:]
                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ <--- HERE
        sph=cart.new_empty(sph_shape,device=cart.device)
        sph[0]=self.sqrt2pi_rev*self.sqrt2_rev

